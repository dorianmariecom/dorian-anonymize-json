#!/usr/bin/env ruby
# frozen_string_literal: true

require "json"

def anonymize_json(data)
  if data.is_a?(Array)
    data.map { |element| anonymize_json(element) }
  elsif data.is_a?(Hash)
    data.transform_values { |value| anonymize_json(value) }
  elsif data.is_a?(String)
    data.gsub(/[0-9]/, "0").gsub(/[a-z]/, "a").gsub(/[A-Z]/, "A")
  elsif data.is_a?(Integer)
    0
  elsif data.is_a?(Float)
    0.0
  elsif data.is_a?(TrueClass) || data.is_a?(FalseClass)
    false
  else
    raise NotImplementedError, data.class.name
  end
end

if ARGV[0] == "--help" || ARGV[0] == "-h"
  puts "USAGE: anonymize-yaml FILES..."
  puts "USAGE: ... | anonymize-yaml"
  exit
end

inputs = ARGV

if inputs.empty?
  inputs = $stdin.each_line.to_a

  inputs =
    if File.exist?(inputs.first.strip)
      inputs.map(&:strip)
    else
      [inputs.join]
    end
end

inputs.each do |input|
  content = File.exist?(input) ? File.read(input) : input
  json = JSON.pretty_generate(anonymize_json(JSON.parse(content)))
  File.exist?(input) ? File.write(input, json) : puts(json)
end
